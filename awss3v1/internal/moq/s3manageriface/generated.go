// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package s3manageriface

import (
	"context"
	"github.com/at-wat/s3iot/awss3v1/internal/moq/s3manageriface/iface"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"io"
	"sync"
)

// Ensure, that MockDownloader does implement iface.DownloaderAPI.
// If this is not the case, regenerate this file with moq.
var _ iface.DownloaderAPI = &MockDownloader{}

// MockDownloader is a mock implementation of iface.DownloaderAPI.
//
//	func TestSomethingThatUsesDownloaderAPI(t *testing.T) {
//
//		// make and configure a mocked iface.DownloaderAPI
//		mockedDownloaderAPI := &MockDownloader{
//			DownloadFunc: func(writerAt io.WriterAt, getObjectInput *s3.GetObjectInput, fns ...func(*s3manager.Downloader)) (int64, error) {
//				panic("mock out the Download method")
//			},
//			DownloadWithContextFunc: func(contextMoqParam context.Context, writerAt io.WriterAt, getObjectInput *s3.GetObjectInput, fns ...func(*s3manager.Downloader)) (int64, error) {
//				panic("mock out the DownloadWithContext method")
//			},
//		}
//
//		// use mockedDownloaderAPI in code that requires iface.DownloaderAPI
//		// and then make assertions.
//
//	}
type MockDownloader struct {
	// DownloadFunc mocks the Download method.
	DownloadFunc func(writerAt io.WriterAt, getObjectInput *s3.GetObjectInput, fns ...func(*s3manager.Downloader)) (int64, error)

	// DownloadWithContextFunc mocks the DownloadWithContext method.
	DownloadWithContextFunc func(contextMoqParam context.Context, writerAt io.WriterAt, getObjectInput *s3.GetObjectInput, fns ...func(*s3manager.Downloader)) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Download holds details about calls to the Download method.
		Download []struct {
			// WriterAt is the writerAt argument value.
			WriterAt io.WriterAt
			// GetObjectInput is the getObjectInput argument value.
			GetObjectInput *s3.GetObjectInput
			// Fns is the fns argument value.
			Fns []func(*s3manager.Downloader)
		}
		// DownloadWithContext holds details about calls to the DownloadWithContext method.
		DownloadWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// WriterAt is the writerAt argument value.
			WriterAt io.WriterAt
			// GetObjectInput is the getObjectInput argument value.
			GetObjectInput *s3.GetObjectInput
			// Fns is the fns argument value.
			Fns []func(*s3manager.Downloader)
		}
	}
	lockDownload            sync.RWMutex
	lockDownloadWithContext sync.RWMutex
}

// Download calls DownloadFunc.
func (mock *MockDownloader) Download(writerAt io.WriterAt, getObjectInput *s3.GetObjectInput, fns ...func(*s3manager.Downloader)) (int64, error) {
	if mock.DownloadFunc == nil {
		panic("MockDownloader.DownloadFunc: method is nil but DownloaderAPI.Download was just called")
	}
	callInfo := struct {
		WriterAt       io.WriterAt
		GetObjectInput *s3.GetObjectInput
		Fns            []func(*s3manager.Downloader)
	}{
		WriterAt:       writerAt,
		GetObjectInput: getObjectInput,
		Fns:            fns,
	}
	mock.lockDownload.Lock()
	mock.calls.Download = append(mock.calls.Download, callInfo)
	mock.lockDownload.Unlock()
	return mock.DownloadFunc(writerAt, getObjectInput, fns...)
}

// DownloadCalls gets all the calls that were made to Download.
// Check the length with:
//
//	len(mockedDownloaderAPI.DownloadCalls())
func (mock *MockDownloader) DownloadCalls() []struct {
	WriterAt       io.WriterAt
	GetObjectInput *s3.GetObjectInput
	Fns            []func(*s3manager.Downloader)
} {
	var calls []struct {
		WriterAt       io.WriterAt
		GetObjectInput *s3.GetObjectInput
		Fns            []func(*s3manager.Downloader)
	}
	mock.lockDownload.RLock()
	calls = mock.calls.Download
	mock.lockDownload.RUnlock()
	return calls
}

// DownloadWithContext calls DownloadWithContextFunc.
func (mock *MockDownloader) DownloadWithContext(contextMoqParam context.Context, writerAt io.WriterAt, getObjectInput *s3.GetObjectInput, fns ...func(*s3manager.Downloader)) (int64, error) {
	if mock.DownloadWithContextFunc == nil {
		panic("MockDownloader.DownloadWithContextFunc: method is nil but DownloaderAPI.DownloadWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		WriterAt        io.WriterAt
		GetObjectInput  *s3.GetObjectInput
		Fns             []func(*s3manager.Downloader)
	}{
		ContextMoqParam: contextMoqParam,
		WriterAt:        writerAt,
		GetObjectInput:  getObjectInput,
		Fns:             fns,
	}
	mock.lockDownloadWithContext.Lock()
	mock.calls.DownloadWithContext = append(mock.calls.DownloadWithContext, callInfo)
	mock.lockDownloadWithContext.Unlock()
	return mock.DownloadWithContextFunc(contextMoqParam, writerAt, getObjectInput, fns...)
}

// DownloadWithContextCalls gets all the calls that were made to DownloadWithContext.
// Check the length with:
//
//	len(mockedDownloaderAPI.DownloadWithContextCalls())
func (mock *MockDownloader) DownloadWithContextCalls() []struct {
	ContextMoqParam context.Context
	WriterAt        io.WriterAt
	GetObjectInput  *s3.GetObjectInput
	Fns             []func(*s3manager.Downloader)
} {
	var calls []struct {
		ContextMoqParam context.Context
		WriterAt        io.WriterAt
		GetObjectInput  *s3.GetObjectInput
		Fns             []func(*s3manager.Downloader)
	}
	mock.lockDownloadWithContext.RLock()
	calls = mock.calls.DownloadWithContext
	mock.lockDownloadWithContext.RUnlock()
	return calls
}

// Ensure, that MockUploader does implement iface.UploaderAPI.
// If this is not the case, regenerate this file with moq.
var _ iface.UploaderAPI = &MockUploader{}

// MockUploader is a mock implementation of iface.UploaderAPI.
//
//	func TestSomethingThatUsesUploaderAPI(t *testing.T) {
//
//		// make and configure a mocked iface.UploaderAPI
//		mockedUploaderAPI := &MockUploader{
//			UploadFunc: func(uploadInput *s3manager.UploadInput, fns ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
//				panic("mock out the Upload method")
//			},
//			UploadWithContextFunc: func(contextMoqParam context.Context, uploadInput *s3manager.UploadInput, fns ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
//				panic("mock out the UploadWithContext method")
//			},
//		}
//
//		// use mockedUploaderAPI in code that requires iface.UploaderAPI
//		// and then make assertions.
//
//	}
type MockUploader struct {
	// UploadFunc mocks the Upload method.
	UploadFunc func(uploadInput *s3manager.UploadInput, fns ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)

	// UploadWithContextFunc mocks the UploadWithContext method.
	UploadWithContextFunc func(contextMoqParam context.Context, uploadInput *s3manager.UploadInput, fns ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// Upload holds details about calls to the Upload method.
		Upload []struct {
			// UploadInput is the uploadInput argument value.
			UploadInput *s3manager.UploadInput
			// Fns is the fns argument value.
			Fns []func(*s3manager.Uploader)
		}
		// UploadWithContext holds details about calls to the UploadWithContext method.
		UploadWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UploadInput is the uploadInput argument value.
			UploadInput *s3manager.UploadInput
			// Fns is the fns argument value.
			Fns []func(*s3manager.Uploader)
		}
	}
	lockUpload            sync.RWMutex
	lockUploadWithContext sync.RWMutex
}

// Upload calls UploadFunc.
func (mock *MockUploader) Upload(uploadInput *s3manager.UploadInput, fns ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	if mock.UploadFunc == nil {
		panic("MockUploader.UploadFunc: method is nil but UploaderAPI.Upload was just called")
	}
	callInfo := struct {
		UploadInput *s3manager.UploadInput
		Fns         []func(*s3manager.Uploader)
	}{
		UploadInput: uploadInput,
		Fns:         fns,
	}
	mock.lockUpload.Lock()
	mock.calls.Upload = append(mock.calls.Upload, callInfo)
	mock.lockUpload.Unlock()
	return mock.UploadFunc(uploadInput, fns...)
}

// UploadCalls gets all the calls that were made to Upload.
// Check the length with:
//
//	len(mockedUploaderAPI.UploadCalls())
func (mock *MockUploader) UploadCalls() []struct {
	UploadInput *s3manager.UploadInput
	Fns         []func(*s3manager.Uploader)
} {
	var calls []struct {
		UploadInput *s3manager.UploadInput
		Fns         []func(*s3manager.Uploader)
	}
	mock.lockUpload.RLock()
	calls = mock.calls.Upload
	mock.lockUpload.RUnlock()
	return calls
}

// UploadWithContext calls UploadWithContextFunc.
func (mock *MockUploader) UploadWithContext(contextMoqParam context.Context, uploadInput *s3manager.UploadInput, fns ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	if mock.UploadWithContextFunc == nil {
		panic("MockUploader.UploadWithContextFunc: method is nil but UploaderAPI.UploadWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		UploadInput     *s3manager.UploadInput
		Fns             []func(*s3manager.Uploader)
	}{
		ContextMoqParam: contextMoqParam,
		UploadInput:     uploadInput,
		Fns:             fns,
	}
	mock.lockUploadWithContext.Lock()
	mock.calls.UploadWithContext = append(mock.calls.UploadWithContext, callInfo)
	mock.lockUploadWithContext.Unlock()
	return mock.UploadWithContextFunc(contextMoqParam, uploadInput, fns...)
}

// UploadWithContextCalls gets all the calls that were made to UploadWithContext.
// Check the length with:
//
//	len(mockedUploaderAPI.UploadWithContextCalls())
func (mock *MockUploader) UploadWithContextCalls() []struct {
	ContextMoqParam context.Context
	UploadInput     *s3manager.UploadInput
	Fns             []func(*s3manager.Uploader)
} {
	var calls []struct {
		ContextMoqParam context.Context
		UploadInput     *s3manager.UploadInput
		Fns             []func(*s3manager.Uploader)
	}
	mock.lockUploadWithContext.RLock()
	calls = mock.calls.UploadWithContext
	mock.lockUploadWithContext.RUnlock()
	return calls
}
