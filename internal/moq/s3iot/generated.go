// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks_3iot

import (
	"context"
	"github.com/at-wat/s3iot"
	"io"
	"sync"
)

// Ensure, that MockS3API does implement s3iot.S3API.
// If this is not the case, regenerate this file with moq.
var _ s3iot.S3API = &MockS3API{}

// MockS3API is a mock implementation of s3iot.S3API.
//
// 	func TestSomethingThatUsesS3API(t *testing.T) {
//
// 		// make and configure a mocked s3iot.S3API
// 		mockedS3API := &MockS3API{
// 			AbortMultipartUploadFunc: func(ctx context.Context, input *s3iot.AbortMultipartUploadInput) (*s3iot.AbortMultipartUploadOutput, error) {
// 				panic("mock out the AbortMultipartUpload method")
// 			},
// 			CompleteMultipartUploadFunc: func(ctx context.Context, input *s3iot.CompleteMultipartUploadInput) (*s3iot.CompleteMultipartUploadOutput, error) {
// 				panic("mock out the CompleteMultipartUpload method")
// 			},
// 			CreateMultipartUploadFunc: func(ctx context.Context, input *s3iot.CreateMultipartUploadInput) (*s3iot.CreateMultipartUploadOutput, error) {
// 				panic("mock out the CreateMultipartUpload method")
// 			},
// 			GetObjectFunc: func(ctx context.Context, input *s3iot.GetObjectInput) (*s3iot.GetObjectOutput, error) {
// 				panic("mock out the GetObject method")
// 			},
// 			PutObjectFunc: func(ctx context.Context, input *s3iot.PutObjectInput) (*s3iot.PutObjectOutput, error) {
// 				panic("mock out the PutObject method")
// 			},
// 			UploadPartFunc: func(ctx context.Context, input *s3iot.UploadPartInput) (*s3iot.UploadPartOutput, error) {
// 				panic("mock out the UploadPart method")
// 			},
// 		}
//
// 		// use mockedS3API in code that requires s3iot.S3API
// 		// and then make assertions.
//
// 	}
type MockS3API struct {
	// AbortMultipartUploadFunc mocks the AbortMultipartUpload method.
	AbortMultipartUploadFunc func(ctx context.Context, input *s3iot.AbortMultipartUploadInput) (*s3iot.AbortMultipartUploadOutput, error)

	// CompleteMultipartUploadFunc mocks the CompleteMultipartUpload method.
	CompleteMultipartUploadFunc func(ctx context.Context, input *s3iot.CompleteMultipartUploadInput) (*s3iot.CompleteMultipartUploadOutput, error)

	// CreateMultipartUploadFunc mocks the CreateMultipartUpload method.
	CreateMultipartUploadFunc func(ctx context.Context, input *s3iot.CreateMultipartUploadInput) (*s3iot.CreateMultipartUploadOutput, error)

	// GetObjectFunc mocks the GetObject method.
	GetObjectFunc func(ctx context.Context, input *s3iot.GetObjectInput) (*s3iot.GetObjectOutput, error)

	// PutObjectFunc mocks the PutObject method.
	PutObjectFunc func(ctx context.Context, input *s3iot.PutObjectInput) (*s3iot.PutObjectOutput, error)

	// UploadPartFunc mocks the UploadPart method.
	UploadPartFunc func(ctx context.Context, input *s3iot.UploadPartInput) (*s3iot.UploadPartOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// AbortMultipartUpload holds details about calls to the AbortMultipartUpload method.
		AbortMultipartUpload []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *s3iot.AbortMultipartUploadInput
		}
		// CompleteMultipartUpload holds details about calls to the CompleteMultipartUpload method.
		CompleteMultipartUpload []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *s3iot.CompleteMultipartUploadInput
		}
		// CreateMultipartUpload holds details about calls to the CreateMultipartUpload method.
		CreateMultipartUpload []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *s3iot.CreateMultipartUploadInput
		}
		// GetObject holds details about calls to the GetObject method.
		GetObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *s3iot.GetObjectInput
		}
		// PutObject holds details about calls to the PutObject method.
		PutObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *s3iot.PutObjectInput
		}
		// UploadPart holds details about calls to the UploadPart method.
		UploadPart []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *s3iot.UploadPartInput
		}
	}
	lockAbortMultipartUpload    sync.RWMutex
	lockCompleteMultipartUpload sync.RWMutex
	lockCreateMultipartUpload   sync.RWMutex
	lockGetObject               sync.RWMutex
	lockPutObject               sync.RWMutex
	lockUploadPart              sync.RWMutex
}

// AbortMultipartUpload calls AbortMultipartUploadFunc.
func (mock *MockS3API) AbortMultipartUpload(ctx context.Context, input *s3iot.AbortMultipartUploadInput) (*s3iot.AbortMultipartUploadOutput, error) {
	if mock.AbortMultipartUploadFunc == nil {
		panic("MockS3API.AbortMultipartUploadFunc: method is nil but S3API.AbortMultipartUpload was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input *s3iot.AbortMultipartUploadInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockAbortMultipartUpload.Lock()
	mock.calls.AbortMultipartUpload = append(mock.calls.AbortMultipartUpload, callInfo)
	mock.lockAbortMultipartUpload.Unlock()
	return mock.AbortMultipartUploadFunc(ctx, input)
}

// AbortMultipartUploadCalls gets all the calls that were made to AbortMultipartUpload.
// Check the length with:
//     len(mockedS3API.AbortMultipartUploadCalls())
func (mock *MockS3API) AbortMultipartUploadCalls() []struct {
	Ctx   context.Context
	Input *s3iot.AbortMultipartUploadInput
} {
	var calls []struct {
		Ctx   context.Context
		Input *s3iot.AbortMultipartUploadInput
	}
	mock.lockAbortMultipartUpload.RLock()
	calls = mock.calls.AbortMultipartUpload
	mock.lockAbortMultipartUpload.RUnlock()
	return calls
}

// CompleteMultipartUpload calls CompleteMultipartUploadFunc.
func (mock *MockS3API) CompleteMultipartUpload(ctx context.Context, input *s3iot.CompleteMultipartUploadInput) (*s3iot.CompleteMultipartUploadOutput, error) {
	if mock.CompleteMultipartUploadFunc == nil {
		panic("MockS3API.CompleteMultipartUploadFunc: method is nil but S3API.CompleteMultipartUpload was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input *s3iot.CompleteMultipartUploadInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockCompleteMultipartUpload.Lock()
	mock.calls.CompleteMultipartUpload = append(mock.calls.CompleteMultipartUpload, callInfo)
	mock.lockCompleteMultipartUpload.Unlock()
	return mock.CompleteMultipartUploadFunc(ctx, input)
}

// CompleteMultipartUploadCalls gets all the calls that were made to CompleteMultipartUpload.
// Check the length with:
//     len(mockedS3API.CompleteMultipartUploadCalls())
func (mock *MockS3API) CompleteMultipartUploadCalls() []struct {
	Ctx   context.Context
	Input *s3iot.CompleteMultipartUploadInput
} {
	var calls []struct {
		Ctx   context.Context
		Input *s3iot.CompleteMultipartUploadInput
	}
	mock.lockCompleteMultipartUpload.RLock()
	calls = mock.calls.CompleteMultipartUpload
	mock.lockCompleteMultipartUpload.RUnlock()
	return calls
}

// CreateMultipartUpload calls CreateMultipartUploadFunc.
func (mock *MockS3API) CreateMultipartUpload(ctx context.Context, input *s3iot.CreateMultipartUploadInput) (*s3iot.CreateMultipartUploadOutput, error) {
	if mock.CreateMultipartUploadFunc == nil {
		panic("MockS3API.CreateMultipartUploadFunc: method is nil but S3API.CreateMultipartUpload was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input *s3iot.CreateMultipartUploadInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockCreateMultipartUpload.Lock()
	mock.calls.CreateMultipartUpload = append(mock.calls.CreateMultipartUpload, callInfo)
	mock.lockCreateMultipartUpload.Unlock()
	return mock.CreateMultipartUploadFunc(ctx, input)
}

// CreateMultipartUploadCalls gets all the calls that were made to CreateMultipartUpload.
// Check the length with:
//     len(mockedS3API.CreateMultipartUploadCalls())
func (mock *MockS3API) CreateMultipartUploadCalls() []struct {
	Ctx   context.Context
	Input *s3iot.CreateMultipartUploadInput
} {
	var calls []struct {
		Ctx   context.Context
		Input *s3iot.CreateMultipartUploadInput
	}
	mock.lockCreateMultipartUpload.RLock()
	calls = mock.calls.CreateMultipartUpload
	mock.lockCreateMultipartUpload.RUnlock()
	return calls
}

// GetObject calls GetObjectFunc.
func (mock *MockS3API) GetObject(ctx context.Context, input *s3iot.GetObjectInput) (*s3iot.GetObjectOutput, error) {
	if mock.GetObjectFunc == nil {
		panic("MockS3API.GetObjectFunc: method is nil but S3API.GetObject was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input *s3iot.GetObjectInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockGetObject.Lock()
	mock.calls.GetObject = append(mock.calls.GetObject, callInfo)
	mock.lockGetObject.Unlock()
	return mock.GetObjectFunc(ctx, input)
}

// GetObjectCalls gets all the calls that were made to GetObject.
// Check the length with:
//     len(mockedS3API.GetObjectCalls())
func (mock *MockS3API) GetObjectCalls() []struct {
	Ctx   context.Context
	Input *s3iot.GetObjectInput
} {
	var calls []struct {
		Ctx   context.Context
		Input *s3iot.GetObjectInput
	}
	mock.lockGetObject.RLock()
	calls = mock.calls.GetObject
	mock.lockGetObject.RUnlock()
	return calls
}

// PutObject calls PutObjectFunc.
func (mock *MockS3API) PutObject(ctx context.Context, input *s3iot.PutObjectInput) (*s3iot.PutObjectOutput, error) {
	if mock.PutObjectFunc == nil {
		panic("MockS3API.PutObjectFunc: method is nil but S3API.PutObject was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input *s3iot.PutObjectInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockPutObject.Lock()
	mock.calls.PutObject = append(mock.calls.PutObject, callInfo)
	mock.lockPutObject.Unlock()
	return mock.PutObjectFunc(ctx, input)
}

// PutObjectCalls gets all the calls that were made to PutObject.
// Check the length with:
//     len(mockedS3API.PutObjectCalls())
func (mock *MockS3API) PutObjectCalls() []struct {
	Ctx   context.Context
	Input *s3iot.PutObjectInput
} {
	var calls []struct {
		Ctx   context.Context
		Input *s3iot.PutObjectInput
	}
	mock.lockPutObject.RLock()
	calls = mock.calls.PutObject
	mock.lockPutObject.RUnlock()
	return calls
}

// UploadPart calls UploadPartFunc.
func (mock *MockS3API) UploadPart(ctx context.Context, input *s3iot.UploadPartInput) (*s3iot.UploadPartOutput, error) {
	if mock.UploadPartFunc == nil {
		panic("MockS3API.UploadPartFunc: method is nil but S3API.UploadPart was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input *s3iot.UploadPartInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockUploadPart.Lock()
	mock.calls.UploadPart = append(mock.calls.UploadPart, callInfo)
	mock.lockUploadPart.Unlock()
	return mock.UploadPartFunc(ctx, input)
}

// UploadPartCalls gets all the calls that were made to UploadPart.
// Check the length with:
//     len(mockedS3API.UploadPartCalls())
func (mock *MockS3API) UploadPartCalls() []struct {
	Ctx   context.Context
	Input *s3iot.UploadPartInput
} {
	var calls []struct {
		Ctx   context.Context
		Input *s3iot.UploadPartInput
	}
	mock.lockUploadPart.RLock()
	calls = mock.calls.UploadPart
	mock.lockUploadPart.RUnlock()
	return calls
}

// Ensure, that MockReadInterceptorFactory does implement s3iot.ReadInterceptorFactory.
// If this is not the case, regenerate this file with moq.
var _ s3iot.ReadInterceptorFactory = &MockReadInterceptorFactory{}

// MockReadInterceptorFactory is a mock implementation of s3iot.ReadInterceptorFactory.
//
// 	func TestSomethingThatUsesReadInterceptorFactory(t *testing.T) {
//
// 		// make and configure a mocked s3iot.ReadInterceptorFactory
// 		mockedReadInterceptorFactory := &MockReadInterceptorFactory{
// 			NewFunc: func() s3iot.ReadInterceptor {
// 				panic("mock out the New method")
// 			},
// 		}
//
// 		// use mockedReadInterceptorFactory in code that requires s3iot.ReadInterceptorFactory
// 		// and then make assertions.
//
// 	}
type MockReadInterceptorFactory struct {
	// NewFunc mocks the New method.
	NewFunc func() s3iot.ReadInterceptor

	// calls tracks calls to the methods.
	calls struct {
		// New holds details about calls to the New method.
		New []struct {
		}
	}
	lockNew sync.RWMutex
}

// New calls NewFunc.
func (mock *MockReadInterceptorFactory) New() s3iot.ReadInterceptor {
	if mock.NewFunc == nil {
		panic("MockReadInterceptorFactory.NewFunc: method is nil but ReadInterceptorFactory.New was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNew.Lock()
	mock.calls.New = append(mock.calls.New, callInfo)
	mock.lockNew.Unlock()
	return mock.NewFunc()
}

// NewCalls gets all the calls that were made to New.
// Check the length with:
//     len(mockedReadInterceptorFactory.NewCalls())
func (mock *MockReadInterceptorFactory) NewCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNew.RLock()
	calls = mock.calls.New
	mock.lockNew.RUnlock()
	return calls
}

// Ensure, that MockReadInterceptor does implement s3iot.ReadInterceptor.
// If this is not the case, regenerate this file with moq.
var _ s3iot.ReadInterceptor = &MockReadInterceptor{}

// MockReadInterceptor is a mock implementation of s3iot.ReadInterceptor.
//
// 	func TestSomethingThatUsesReadInterceptor(t *testing.T) {
//
// 		// make and configure a mocked s3iot.ReadInterceptor
// 		mockedReadInterceptor := &MockReadInterceptor{
// 			ReaderFunc: func(readSeeker io.ReadSeeker) io.ReadSeeker {
// 				panic("mock out the Reader method")
// 			},
// 		}
//
// 		// use mockedReadInterceptor in code that requires s3iot.ReadInterceptor
// 		// and then make assertions.
//
// 	}
type MockReadInterceptor struct {
	// ReaderFunc mocks the Reader method.
	ReaderFunc func(readSeeker io.ReadSeeker) io.ReadSeeker

	// calls tracks calls to the methods.
	calls struct {
		// Reader holds details about calls to the Reader method.
		Reader []struct {
			// ReadSeeker is the readSeeker argument value.
			ReadSeeker io.ReadSeeker
		}
	}
	lockReader sync.RWMutex
}

// Reader calls ReaderFunc.
func (mock *MockReadInterceptor) Reader(readSeeker io.ReadSeeker) io.ReadSeeker {
	if mock.ReaderFunc == nil {
		panic("MockReadInterceptor.ReaderFunc: method is nil but ReadInterceptor.Reader was just called")
	}
	callInfo := struct {
		ReadSeeker io.ReadSeeker
	}{
		ReadSeeker: readSeeker,
	}
	mock.lockReader.Lock()
	mock.calls.Reader = append(mock.calls.Reader, callInfo)
	mock.lockReader.Unlock()
	return mock.ReaderFunc(readSeeker)
}

// ReaderCalls gets all the calls that were made to Reader.
// Check the length with:
//     len(mockedReadInterceptor.ReaderCalls())
func (mock *MockReadInterceptor) ReaderCalls() []struct {
	ReadSeeker io.ReadSeeker
} {
	var calls []struct {
		ReadSeeker io.ReadSeeker
	}
	mock.lockReader.RLock()
	calls = mock.calls.Reader
	mock.lockReader.RUnlock()
	return calls
}
