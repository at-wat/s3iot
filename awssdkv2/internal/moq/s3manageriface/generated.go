// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock_s3manageriface

import (
	"context"
	"github.com/at-wat/s3iot/awssdkv2/s3manageriface"
	"github.com/aws/aws-sdk-go-v2/feature/s3/manager"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"io"
	"sync"
)

// Ensure, that MockUploader does implement s3manageriface.Uploader.
// If this is not the case, regenerate this file with moq.
var _ s3manageriface.Uploader = &MockUploader{}

// MockUploader is a mock implementation of s3manageriface.Uploader.
//
// 	func TestSomethingThatUsesUploader(t *testing.T) {
//
// 		// make and configure a mocked s3manageriface.Uploader
// 		mockedUploader := &MockUploader{
// 			UploadFunc: func(ctx context.Context, input *s3.PutObjectInput, opts ...func(*manager.Uploader)) (*manager.UploadOutput, error) {
// 				panic("mock out the Upload method")
// 			},
// 		}
//
// 		// use mockedUploader in code that requires s3manageriface.Uploader
// 		// and then make assertions.
//
// 	}
type MockUploader struct {
	// UploadFunc mocks the Upload method.
	UploadFunc func(ctx context.Context, input *s3.PutObjectInput, opts ...func(*manager.Uploader)) (*manager.UploadOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// Upload holds details about calls to the Upload method.
		Upload []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *s3.PutObjectInput
			// Opts is the opts argument value.
			Opts []func(*manager.Uploader)
		}
	}
	lockUpload sync.RWMutex
}

// Upload calls UploadFunc.
func (mock *MockUploader) Upload(ctx context.Context, input *s3.PutObjectInput, opts ...func(*manager.Uploader)) (*manager.UploadOutput, error) {
	if mock.UploadFunc == nil {
		panic("MockUploader.UploadFunc: method is nil but Uploader.Upload was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input *s3.PutObjectInput
		Opts  []func(*manager.Uploader)
	}{
		Ctx:   ctx,
		Input: input,
		Opts:  opts,
	}
	mock.lockUpload.Lock()
	mock.calls.Upload = append(mock.calls.Upload, callInfo)
	mock.lockUpload.Unlock()
	return mock.UploadFunc(ctx, input, opts...)
}

// UploadCalls gets all the calls that were made to Upload.
// Check the length with:
//     len(mockedUploader.UploadCalls())
func (mock *MockUploader) UploadCalls() []struct {
	Ctx   context.Context
	Input *s3.PutObjectInput
	Opts  []func(*manager.Uploader)
} {
	var calls []struct {
		Ctx   context.Context
		Input *s3.PutObjectInput
		Opts  []func(*manager.Uploader)
	}
	mock.lockUpload.RLock()
	calls = mock.calls.Upload
	mock.lockUpload.RUnlock()
	return calls
}

// Ensure, that MockDownloader does implement s3manageriface.Downloader.
// If this is not the case, regenerate this file with moq.
var _ s3manageriface.Downloader = &MockDownloader{}

// MockDownloader is a mock implementation of s3manageriface.Downloader.
//
// 	func TestSomethingThatUsesDownloader(t *testing.T) {
//
// 		// make and configure a mocked s3manageriface.Downloader
// 		mockedDownloader := &MockDownloader{
// 			DownloadFunc: func(ctx context.Context, w io.WriterAt, input *s3.GetObjectInput, options ...func(*manager.Downloader)) (int64, error) {
// 				panic("mock out the Download method")
// 			},
// 		}
//
// 		// use mockedDownloader in code that requires s3manageriface.Downloader
// 		// and then make assertions.
//
// 	}
type MockDownloader struct {
	// DownloadFunc mocks the Download method.
	DownloadFunc func(ctx context.Context, w io.WriterAt, input *s3.GetObjectInput, options ...func(*manager.Downloader)) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Download holds details about calls to the Download method.
		Download []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// W is the w argument value.
			W io.WriterAt
			// Input is the input argument value.
			Input *s3.GetObjectInput
			// Options is the options argument value.
			Options []func(*manager.Downloader)
		}
	}
	lockDownload sync.RWMutex
}

// Download calls DownloadFunc.
func (mock *MockDownloader) Download(ctx context.Context, w io.WriterAt, input *s3.GetObjectInput, options ...func(*manager.Downloader)) (int64, error) {
	if mock.DownloadFunc == nil {
		panic("MockDownloader.DownloadFunc: method is nil but Downloader.Download was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		W       io.WriterAt
		Input   *s3.GetObjectInput
		Options []func(*manager.Downloader)
	}{
		Ctx:     ctx,
		W:       w,
		Input:   input,
		Options: options,
	}
	mock.lockDownload.Lock()
	mock.calls.Download = append(mock.calls.Download, callInfo)
	mock.lockDownload.Unlock()
	return mock.DownloadFunc(ctx, w, input, options...)
}

// DownloadCalls gets all the calls that were made to Download.
// Check the length with:
//     len(mockedDownloader.DownloadCalls())
func (mock *MockDownloader) DownloadCalls() []struct {
	Ctx     context.Context
	W       io.WriterAt
	Input   *s3.GetObjectInput
	Options []func(*manager.Downloader)
} {
	var calls []struct {
		Ctx     context.Context
		W       io.WriterAt
		Input   *s3.GetObjectInput
		Options []func(*manager.Downloader)
	}
	mock.lockDownload.RLock()
	calls = mock.calls.Download
	mock.lockDownload.RUnlock()
	return calls
}
